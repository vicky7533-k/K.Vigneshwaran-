{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOKLQXUWQkbcogvyv9rg3SS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report\n","\n","# Sample data: Each row represents traffic at a time point\n","# Features: hour of day (0-23), day of week (0=Mon,...6=Sun), weather condition (0=clear,1=rain,2=fog)\n","# Target: congestion level (0=low, 1=medium, 2=high)\n","data = {\n","    'hour': [8, 9, 17, 18, 12, 14, 22, 6, 7, 15],\n","    'day_of_week': [0, 0, 0, 0, 2, 2, 6, 5, 5, 3],\n","    'weather': [0, 0, 1, 2, 0, 1, 0, 0, 0, 1],\n","    'congestion': [2, 2, 2, 1, 0, 1, 0, 0, 1, 1]\n","}\n","\n","# Load data into DataFrame\n","df = pd.DataFrame(data)\n","\n","# Features and target\n","X = df[['hour', 'day_of_week', 'weather']]\n","y = df['congestion']\n","\n","# Split data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Initialize Random Forest classifier\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","\n","# Train model\n","model.fit(X_train, y_train)\n","\n","# Predict on test data\n","y_pred = model.predict(X_test)\n","\n","# Evaluate the model\n","print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n","\n","# Example: Predict congestion for new input\n","new_data = pd.DataFrame({'hour': [16], 'day_of_week': [4], 'weather': [1]})\n","predicted_congestion = model.predict(new_data)\n","congestion_map = {0: 'Low', 1: 'Medium', 2: 'High'}\n","\n","print(f\"Predicted traffic congestion level: {congestion_map[predicted_congestion[0]]}\")"],"metadata":{"id":"DuoDtPxwsGVv","executionInfo":{"status":"ok","timestamp":1747744500664,"user_tz":-330,"elapsed":6066,"user":{"displayName":"Sarumathi Sugavanam","userId":"08602594580497590154"}},"outputId":"6f564e46-d9c1-4ef4-b9e3-b03b04ec34fe","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.00      0.00      0.00         0\n","           1       1.00      0.50      0.67         2\n","           2       1.00      1.00      1.00         1\n","\n","    accuracy                           0.67         3\n","   macro avg       0.67      0.50      0.56         3\n","weighted avg       1.00      0.67      0.78         3\n","\n","Predicted traffic congestion level: Medium\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]}]}]}